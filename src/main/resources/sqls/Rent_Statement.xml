<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dowon.bds.model.mapper.RentDaoImpl">
	
<!-- 대출하기 -->	
<insert id="bookRent" parameterType="java.util.Map">
	INSERT INTO TB_BOOK_RENT
		(RENT_SEQ, USER_SEQ, BOOK_SEQ, RENT_DATE, RENT_RETURN_DATE, RENT_STATUS)
		SELECT SQ_RENT.NEXTVAL, U.USER_SEQ, B.BOOK_SEQ, SYSDATE, SYSDATE + 7, 'Y'
		FROM TB_USER U
		CROSS JOIN TB_BOOK B
		WHERE U.USER_SEQ = #{user_seq}
		  AND B.BOOK_SEQ = #{book_seq}
</insert>


<!-- 특정 회원의 현재 대출중인 책 조회 -->
<select id="rentCheck" parameterType="java.lang.Integer" resultType="Map">
	SELECT U.USER_SEQ AS USER_SEQ, U.USER_NAME AS USER_NAME, B.BOOK_TITLE AS BOOK_TITLE, B.BOOK_SEQ AS BOOK_SEQ, R.RENT_DATE, R.RENT_RETURN_DATE, R.RENT_STATUS
	FROM BOOK.TB_BOOK_RENT R
	INNER JOIN BOOK.TB_USER U ON R.USER_SEQ = U.USER_SEQ
	INNER JOIN BOOK.TB_BOOK B ON R.BOOK_SEQ = B.BOOK_SEQ
	WHERE U.USER_SEQ = #{user_seq}
	  AND R.RENT_STATUS = 'Y'
</select>


<!-- 특정 회원의 대출목록 전부 조회 -->
<select id="selectMyBookRent" parameterType="java.lang.Integer" resultType="java.util.Map">
    SELECT R.RENT_SEQ, R.USER_SEQ, R.BOOK_SEQ, R.RENT_DATE, R.RENT_RETURN_DATE, R.RENT_STATUS,
           U.USER_NAME AS user_name, B.BOOK_TITLE AS book_title
    FROM TB_BOOK_RENT R
    INNER JOIN BOOK.TB_USER U ON R.USER_SEQ = U.USER_SEQ
    INNER JOIN BOOK.TB_BOOK B ON R.BOOK_SEQ = B.BOOK_SEQ
    WHERE U.USER_SEQ = #{user_seq}
    ORDER BY RENT_DATE DESC
</select>

<!-- 유저개인의 대출 페이징을 위한 쿼리 -->
<select id="userCountRent" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    SELECT COUNT(*) 
    FROM TB_BOOK_RENT 
    WHERE USER_SEQ = #{user_seq}
</select>

<select id="userRentPageList" parameterType="java.util.Map" resultType="java.util.Map">
SELECT SEQ, USER_SEQ, BOOK_SEQ, RENT_DATE, RENT_RETURN_DATE, RENT_STATUS,
       USER_NAME AS user_name, BOOK_TITLE AS book_title
FROM (
    SELECT R.RENT_SEQ AS SEQ, R.USER_SEQ, R.BOOK_SEQ, R.RENT_DATE, R.RENT_RETURN_DATE, R.RENT_STATUS,
           U.USER_NAME, B.BOOK_TITLE,
           ROW_NUMBER() OVER (ORDER BY R.RENT_DATE DESC) AS RN
    FROM TB_BOOK_RENT R
    INNER JOIN BOOK.TB_USER U ON R.USER_SEQ = U.USER_SEQ
    INNER JOIN BOOK.TB_BOOK B ON R.BOOK_SEQ = B.BOOK_SEQ
    WHERE R.USER_SEQ = #{user_seq}
) TempTable
WHERE RN BETWEEN #{first} AND #{last}
</select>




<!-- 관리자가 회원들의 대출목록 조회 -->
<select id="selectAdminRent" resultType="java.util.Map">
    SELECT B.BOOK_SEQ, R.RENT_SEQ, U.USER_NAME AS USER_NAME, B.BOOK_TITLE AS BOOK_TITLE, R.RENT_DATE, R.RENT_RETURN_DATE, R.RENT_STATUS
    FROM BOOK.TB_BOOK_RENT R
    INNER JOIN BOOK.TB_USER U ON R.USER_SEQ = U.USER_SEQ
    INNER JOIN BOOK.TB_BOOK B ON R.BOOK_SEQ = B.BOOK_SEQ
    ORDER BY RENT_DATE DESC
</select>
	
<select id="allUserCountRent" resultType="java.lang.Integer">
SELECT COUNT(*) 
	FROM TB_BOOK_RENT 
</select>
	
<select id="allRentPageList" resultType="java.util.Map" parameterType="java.util.Map">
SELECT SEQ, NAME, USER_SEQ, BOOK_SEQ, BOOK_TITLE, RENT_DATE, RENT_RETURN_DATE, RENT_STATUS
FROM (
    SELECT R.RENT_SEQ AS SEQ, U.USER_NAME AS NAME, U.USER_SEQ, B.BOOK_SEQ, B.BOOK_TITLE, R.RENT_DATE, R.RENT_RETURN_DATE, R.RENT_STATUS,
           ROW_NUMBER() OVER (ORDER BY R.RENT_DATE DESC) AS RN
    FROM BOOK.TB_BOOK_RENT R
    INNER JOIN BOOK.TB_USER U ON R.USER_SEQ = U.USER_SEQ
    INNER JOIN BOOK.TB_BOOK B ON R.BOOK_SEQ = B.BOOK_SEQ
) TempTable
WHERE RN BETWEEN #{first} AND #{last}
</select>

	
<!-- 대출불가한 책 찾기(대출Y,예약R) -->
<select id="selectRentImpossibility" resultType="java.util.Map">
SELECT
    B.BOOK_SEQ AS book_seq, B.BOOK_TITLE AS book_title, R.RENT_STATUS AS rent_status, RV.RESVE_STATUS AS resve_status
FROM TB_BOOK B
LEFT JOIN TB_BOOK_RENT R ON B.BOOK_SEQ = R.BOOK_SEQ
LEFT JOIN TB_RESVE RV ON B.BOOK_SEQ = RV.BOOK_SEQ
WHERE R.RENT_STATUS = 'Y' OR RV.RESVE_STATUS = 'R' 
</select>


<!-- 대출중인 책만 찾기(대출Y) -->
<select id="rentY" resultType="java.util.Map">
    SELECT B.BOOK_SEQ AS book_seq, B.BOOK_TITLE AS book_title, R.RENT_STATUS AS rent_status
    FROM TB_BOOK B
    LEFT JOIN TB_BOOK_RENT R ON B.BOOK_SEQ = R.BOOK_SEQ
    WHERE R.RENT_STATUS = 'Y'
</select>


<!-- 관리자의 반납 완료 처리 -->
<update id="rentStatus" parameterType="java.lang.Integer">
UPDATE TB_BOOK_RENT
SET RENT_STATUS = 'N'
WHERE RENT_SEQ = #{rent_seq}
</update>


<!-- 책상세(test) -->
<select id="bookDetail" parameterType="java.lang.Integer" resultType="BookDto">
SELECT BOOK_SEQ, BOOK_TITLE , BOOK_WRITER , BOOK_ISBN
	FROM TB_BOOK 
	WHERE BOOK_SEQ = #{bookSeq}
</select>


<!-- 책전체(test) -->
<select id="bookAll" resultType="BookDto">
SELECT BOOK_SEQ, BOOK_TITLE , BOOK_WRITER , BOOK_ISBN
	FROM TB_BOOK 
</select>
</mapper>
